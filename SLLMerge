import java.io.*;
import java.util.*;

class SLLNode<E> {
protected E element;
protected SLLNode<E> succ;

public SLLNode(E elem, SLLNode<E> succ) {
this.element = elem;
this.succ = succ;
}

@Override
public String toString() {
return element.toString();
}
}
class SLL<E> {
private SLLNode<E> first;

public SLL() {
// Construct an empty SLL
this.first = null;
}

public void deleteList() {
first = null;
}

public int length() {
int ret;
if (first != null) {
SLLNode<E> tmp = first;
ret = 1;
while (tmp.succ != null) {
tmp = tmp.succ;
ret++;
}
return ret;
} else
return 0;

}

@Override
public String toString() {
String ret = new String();
if (first != null) {
SLLNode<E> tmp = first;
ret += tmp + " ";
while (tmp.succ != null) {
tmp = tmp.succ;
ret += tmp +  " ";
}
} else
ret = "Prazna lista!!!";
return ret;
}

public void insertFirst(E o) {
SLLNode<E> ins = new SLLNode<E>(o, first);
first = ins;
}

public void insertAfter(E o, SLLNode<E> node) {
if (node != null) {
SLLNode<E> ins = new SLLNode<E>(o, node.succ);
node.succ = ins;
} else {
System.out.println("Dadenot jazol e null");
}
}

public void insertBefore(E o, SLLNode<E> before) {

if (first != null) {
SLLNode<E> tmp = first;
if(first==before){
this.insertFirst(o);
return;
}
//ako first!=before
while (tmp.succ != before)
tmp = tmp.succ;
if (tmp.succ == before) {
SLLNode<E> ins = new SLLNode<E>(o, before);
tmp.succ = ins;
} else {
System.out.println("Elementot ne postoi vo listata");
}
} else {
System.out.println("Listata e prazna");
}
}

public void insertLast(E o) {
if (first != null) {
SLLNode<E> tmp = first;
while (tmp.succ != null)
tmp = tmp.succ;
SLLNode<E> ins = new SLLNode<E>(o, null);
tmp.succ = ins;
} else {
insertFirst(o);
}
}

public E deleteFirst() {
if (first != null) {
SLLNode<E> tmp = first;
first = first.succ;
return tmp.element;
} else {
System.out.println("Listata e prazna");
return null;
}
}

public E delete(SLLNode<E> node) {
if (first != null) {
SLLNode<E> tmp = first;
if(first ==node){
return this.deleteFirst();
}
while (tmp.succ != node && tmp.succ.succ != null)
tmp = tmp.succ;
if (tmp.succ == node) {
tmp.succ = tmp.succ.succ;
return node.element;
} else {
System.out.println("Elementot ne postoi vo listata");
return null;
}
} else {
System.out.println("Listata e prazna");
return null;
}

}

public SLLNode<E> getFirst() {
return first;
}

public SLLNode<E> find(E o) {
if (first != null) {
SLLNode<E> tmp = first;
while (tmp.element != o && tmp.succ != null)
tmp = tmp.succ;
if (tmp.element == o) {
return tmp;
} else {
System.out.println("Elementot ne postoi vo listata");
}
} else {
System.out.println("Listata e prazna");
}
return first;
}

    public Iterator<E> iterator () {
    // Return an iterator that visits all elements of this list, in left-to-right order.
        return new LRIterator<E>();
    }

// //////////Inner class ////////////

private class LRIterator<E> implements Iterator<E> {

private SLLNode<E> place, curr;

private LRIterator() {
place = (SLLNode<E>) first;
curr = null;
}

public boolean hasNext() {
return (place != null);
}

public E next() {
if (place == null)
throw new NoSuchElementException();
E nextElem = place.element;
curr = place;
place = place.succ;
return nextElem;
}

public void remove() {
//Not implemented
}
}

public void mirror(){
if (first != null) {
//m=nextsucc, p=tmp,q=next
SLLNode<E> tmp = first;
SLLNode<E> newsucc = null;
SLLNode<E> next;

while(tmp != null){
next = tmp.succ;
tmp.succ = newsucc;
newsucc = tmp;
tmp = next;
}
first = newsucc;
}

}
}

public class SLLJoinLists {
   
    public static SLL<Integer> joinLists(SLL<Integer> lista1, SLL<Integer> lista2)
    {
        SLL<Integer> result = null;
        SLLNode<Integer> d1 = null;
        SLLNode<Integer> d2 = null;
        SLLNode<Integer> next = null;
        if(lista1.getFirst().element < lista2.getFirst().element)
        {
            result = lista1;
            d1 = lista1.getFirst();
            d2 = lista2.getFirst();
        }
        else if(lista1.getFirst().element > lista2.getFirst().element)
        {
            result = lista2;
            d1 = lista2.getFirst();
            d2 = lista1.getFirst();
        }
        else
        {
            result = lista1;
            d1 = lista1.getFirst();
            d2 = lista2.getFirst().succ;
        }
       
        while(d2!=null)
        {
            if(d1.succ!=null)
            {
                if(d1.succ.element > d2.element)
                {
                    sled = d2.succ;
                    d2.succ = d1.succ;
                    d1.succ = d2;
                    d1 = d2;
                    d2 = next;
                }
                else if(d1.succ.element < d2.element)
                {
                    d1 = d1.succ;
                }
                else
                {
                    d1 = d1.succ;
                    d2 = d2.succ;
                }
            }
            else
            {
                d1.succ = d2;
                break;
            }
        }
        return result;
    }
    public static void deleteDuplicates(SLL<Integer> lista)
    {
        SLLNode<Integer> tmp = lista.getFirst();
        while(tmp.succ!=null)
        {
            if(tmp.element.equals(tmp.succ.element))
            {
                tmp.succ = tmp.succ.succ;
            }
            else
            {
                tmp = tmp.succ;
            }
        }
    }
   
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
       
        SLL<Integer> lista1 = new SLL();
        SLL<Integer> lista2 = new SLL();
       
       
        int n = input.nextInt();
       
        for (int i = 0; i < n; i++) {
            lista1.insertLast(input.nextInt());  
        }
        int m = input.nextInt();
       
        for (int i = 0; i < m; i++) {
            lista2.insertLast(input.nextInt());  
        }
       
        deleteDuplicates(lista1);
        deleteDuplicates(lista2);
       
        System.out.println(joinLists(lista1,lista2));
    }
   
}
