//Администрација на чет-систем
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.TreeSet;


class NoSuchUserExcеption extends Exception{
    public NoSuchUserExcеption(String userName) {
        super(userName);
    }
}

class NoSuchRoomExcеption extends Exception{
    public NoSuchRoomExcеption(String roomName) {
        super(roomName);
    }
}

class User implements Comparable<User>{

    String username;

    public User(String username) {
        this.username = username;
    }

    @Override
    public int compareTo(User o) {
        return this.username.compareTo(o.username);
    }

    @Override
    public String toString() {
        return username+"\n";
    }
}



class ChatRoom implements Comparable<ChatRoom>{

    String name;
    Set<User> users;


    public String getName() {
        return name;
    }

    public ChatRoom(String name) {
        users = new TreeSet<>();
        this.name = name;
    }

    public void addUser(String username) {
    users.add(new User(username));

    }

      public void removeUser(String username) {
       for(User user : users){
           if(user.username.compareTo(username)==0){
               users.remove(user);
           break;
           }
       }
    }

    public boolean hasUser(String username) {
        return users.contains(new User(username));
    }

    @Override
    public String toString() {
        if(users.size()==0) return name+"\nEMPTY\n";
        String s=name+"\n";
        for(User user : users)
            s+=user.toString();
        return s;
    }

    public int numUsers(){
        return users.size();
    }

    @Override
    public int compareTo(ChatRoom o) {
        return Comparator.comparing(ChatRoom::numUsers).compare(this,o);
    }
}

class ChatSystem{

    Map<String,ChatRoom> roomsByName;
    Set<String> usersSet;

    public ChatSystem() {
        roomsByName = new TreeMap<>();
        usersSet = new TreeSet<String>();
    }

    public void addRoom(String roomName){
        ChatRoom chatRoom = new ChatRoom(roomName);
        roomsByName.put(roomName,chatRoom);
    }

    public void removeRoom(String roomName){
        roomsByName.remove(roomName);
    }

    public ChatRoom getRoom(String roomName) throws NoSuchRoomExcеption {
        if(!roomsByName.containsKey(roomName))
            throw new NoSuchRoomExcеption(roomName);
        return roomsByName.get(roomName);
    }
    public void register(String username){
        usersSet.add(username);
        String min="";
        if(!roomsByName.isEmpty()){
     min = roomsByName.values().stream().min(Comparator.naturalOrder()).get().getName();
     roomsByName.get(min).addUser(username);
        }
    }

    public void registerAndJoin(String userName, String roomName){
        usersSet.add(userName);
        roomsByName.get(roomName).addUser(userName);
    }

    public void joinRoom(String userName, String roomName) throws NoSuchRoomExcеption, NoSuchUserExcеption {
        if(roomsByName.containsKey(roomName)){
            if(!usersSet.contains(userName))
                throw new NoSuchUserExcеption(userName);
            roomsByName.get(roomName).addUser(userName);
        }
        else throw new NoSuchRoomExcеption(roomName);
    }
    
    public void leaveRoom(String username, String roomName) throws NoSuchRoomExcеption, NoSuchUserExcеption {
        if(roomsByName.containsKey(roomName)){
            if(!usersSet.contains(username)) throw new NoSuchUserExcеption(username);
            roomsByName.get(roomName).removeUser(username);
        }
        else throw new NoSuchRoomExcеption(roomName);
    }
    
    public void followFriend(String username, String friend_username) throws NoSuchUserExcеption {
        if(!usersSet.contains(username))
            throw new NoSuchUserExcеption(username);
        
        for(ChatRoom chatRoom : roomsByName.values()){
            if(chatRoom.hasUser(friend_username)){
                chatRoom.addUser(username);
            }
        }
    }

}

public class ChatSystemTest {

    public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, NoSuchRoomExcеption {
        Scanner jin = new Scanner(System.in);
        int k = jin.nextInt();
        if ( k == 0 ) {
            ChatRoom cr = new ChatRoom(jin.next());
            int n = jin.nextInt();
            for ( int i = 0 ; i < n ; ++i ) {
                k = jin.nextInt();
                if ( k == 0 ) cr.addUser(jin.next());
                if ( k == 1 ) cr.removeUser(jin.next());
                if ( k == 2 ) System.out.println(cr.hasUser(jin.next()));
            }
            System.out.println("");
            System.out.println(cr.toString());
            n = jin.nextInt();
            if ( n == 0 ) return;
            ChatRoom cr2 = new ChatRoom(jin.next());
            for ( int i = 0 ; i < n ; ++i ) {
                k = jin.nextInt();
                if ( k == 0 ) cr2.addUser(jin.next());
                if ( k == 1 ) cr2.removeUser(jin.next());
                if ( k == 2 ) cr2.hasUser(jin.next());
            }
            System.out.println(cr2.toString());
        }
        if ( k == 1 ) {
            ChatSystem cs = new ChatSystem();
            Method mts[] = cs.getClass().getMethods();
            while ( true ) {
                String cmd = jin.next();
                if ( cmd.equals("stop") ) break;
                if ( cmd.equals("print") ) {
                    System.out.println(cs.getRoom(jin.next())+"\n");continue;
                }
                for ( Method m : mts ) {
                    if ( m.getName().equals(cmd) ) {
                        String params[] = new String[m.getParameterTypes().length];
                        for ( int i = 0 ; i < params.length ; ++i ) params[i] = jin.next();
                        m.invoke(cs,params);
                    }
                }
            }
        }
    }

}
